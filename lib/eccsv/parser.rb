#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module ECCSV
class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 36)
  attr_reader :error

  def parse(str)
    @scanner = StringScanner.new(str)
    @line = 1
    @col = 1
    do_parse
  end

  def next_token
    until @scanner.empty?
      next_line = @line
      next_col = @col
      case
        when match = @scanner.scan(/,/)
          token = :COMMA
        when match = @scanner.scan(/"/)
          token = :QUOTE
        when match = @scanner.scan(/\n/)
          token = :NEWLINE
          next_line += 1
          next_col = 0
        when match = @scanner.scan(/[^,\n"]+/)
          token = :TEXT
        else
          raise "can't recognize <#{@scanner.peek(5)}>"
      end
      next_col += match.length

      value = node(match, token)
      @line = next_line
      @col = next_col

      return [token, value]
    end
  end

  def warnings
    @warnings ||= []
  end

  private

  def node(value = "", token = nil, line = @line, col = @col)
    Node.new(value, token, line, col)
  end

  def quoted_text(children = [], line = @line, col = @col)
    QuotedTextNode.new(children, line, col)
  end

  def field(children = [], line = @line, col = @col)
    FieldNode.new(children, line, col)
  end

  def delim_field(children = [], line = @line, col = @col)
    DelimFieldNode.new(children, line, col)
  end

  def delim_fields(children = [], line = @line, col = @col)
    DelimFieldsNode.new(children, line, col)
  end

  def record(children = [], line = @line, col = @col)
    record = RecordNode.new(children, line, col)
    value = record.value
    if defined? @num_fields
      first = children[0]
      line = first.line
      col = first.col
      if @num_fields > value.length
        msg = "expected %d more fields on line %d" % [@num_fields - value.length, line]
        self.warnings.push(MissingFieldsError.new(msg, line, col))
      elsif @num_fields < value.length
        msg = "%d extra fields found on line %d, column %d" % [value.length - @num_fields, line, col]
        self.warnings.push(ExtraFieldsError.new(msg, line, col))
      end
    else
      @num_fields = value.length
    end

    record
  end

  def delim_record(children = [], line = @line, col = @col)
    DelimRecordNode.new(children, line, col)
  end

  def delim_records(children = [], line = @line, col = @col)
    DelimRecordsNode.new(children, line, col)
  end

  def root(children = [], line = @line, col = @col)
    RootNode.new(children, line, col)
  end

  def on_error(t, val, stack)
    #pp t
    #pp val
    #pp stack

    # figure out what error we have
    if t == 0
      # unexpected EOF
      type = nil
      stack.reverse_each do |node|
        case node
        when QuotedTextNode
          type = :unmatched_quote
        when Node
          if type == :unmatched_quote && node.token == :QUOTE
            line = node.line
            col = node.col
            @error = UnmatchedQuoteError.new("unmatched quote at line #{line}, column #{col}", line, col)
          end
        end
      end

      if @error.nil?
        @error = Error.new("unexpected EOF")
      end
    elsif val.is_a?(Node) && val.token == :QUOTE
      line = val.line
      col = val.col
      @error = StrayQuoteError.new("stray quote at line #{line}, column #{col}", line, col)
    end
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    18,    17,    19,    16,    -1,     9,     6,    13,    12,     8,
    14,     3 ]

racc_action_check = [
    15,    15,    15,    15,     2,     4,     2,     7,     7,     3,
    10,     1 ]

racc_action_pointer = [
   nil,    11,     4,     9,     3,   nil,   nil,     3,   nil,   nil,
     7,   nil,   nil,   nil,   nil,    -2,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,   -17,    -8,   -17,    -2,    -4,    -5,   -17,    20,    -6,
    -7,    -9,   -13,   -12,   -10,   -17,   -11,   -14,   -15,   -16 ]

racc_goto_table = [
     1,     2,     4,     5,     7,    10,    11,    15 ]

racc_goto_check = [
     1,     2,     3,     4,     5,     6,     7,     8 ]

racc_goto_pointer = [
   nil,     0,     1,     0,     1,     2,    -2,    -1,    -5 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 7, :_reduce_1,
  2, 7, :_reduce_2,
  0, 8, :_reduce_3,
  2, 8, :_reduce_4,
  1, 10, :_reduce_5,
  2, 10, :_reduce_6,
  2, 9, :_reduce_7,
  0, 11, :_reduce_8,
  2, 11, :_reduce_9,
  2, 13, :_reduce_10,
  3, 12, :_reduce_11,
  1, 12, :_reduce_12,
  0, 14, :_reduce_13,
  2, 14, :_reduce_14,
  2, 14, :_reduce_15,
  2, 14, :_reduce_16 ]

racc_reduce_n = 17

racc_shift_n = 20

racc_token_table = {
  false => 0,
  :error => 1,
  :NEWLINE => 2,
  :COMMA => 3,
  :TEXT => 4,
  :QUOTE => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NEWLINE",
  "COMMA",
  "TEXT",
  "QUOTE",
  "$start",
  "root",
  "delim_records",
  "record",
  "delim_record",
  "delim_fields",
  "field",
  "delim_field",
  "quoted_text" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_1(val, _values, result)
     result = root(val).value 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 5)
  def _reduce_2(val, _values, result)
     result = root(val).value 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_3(val, _values, result)
     result = delim_records 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_4(val, _values, result)
     result = delim_records(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_5(val, _values, result)
     result = delim_record(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_6(val, _values, result)
     result = delim_record(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_7(val, _values, result)
     result = record(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 16)
  def _reduce_8(val, _values, result)
     result = delim_fields 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_9(val, _values, result)
     result = delim_fields(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_10(val, _values, result)
     result = delim_field(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_11(val, _values, result)
     result = field(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_12(val, _values, result)
     result = field(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_13(val, _values, result)
     result = quoted_text 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_14(val, _values, result)
     result = quoted_text(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_15(val, _values, result)
     result = quoted_text(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_16(val, _values, result)
     result = quoted_text(val) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
